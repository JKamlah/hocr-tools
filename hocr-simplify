#!/usr/bin/env python

# change level of typesetting and/or remove properties
# to create a simplified hocr-version

from __future__ import print_function
import argparse
import re
import sys
import os

from lxml import etree, html

parser = argparse.ArgumentParser(
    description=('change level of typesetting and/or'
                 'remove properties to create'
                 'a simplified hocr-version'))
properties = {'baseline', 'bbox', 'cflow', 'cuts', 'hardbreak', 'image',
              'imagemd5', 'lpageno', 'ppageno', 'nlp', 'order', 'poly',
              'scan_res', 'textangle', 'x_booxes', 'x_font', 'x_fsize',
              'x_confs', 'x_scanner', 'x_source', 'x_wconf'}

parser.add_argument('file', nargs='?', default=sys.stdin)
parser.add_argument('-t', '--typesetting', type=str,
                    choices=['glyph', 'word', 'line', 'par', 'carea', 'page'],
                    help='Maximum level of typesetting')
parser.add_argument('-a', '--remove-attributes', nargs='+',
                    help='Removes attributes, e.g. id')
parser.add_argument('-e', '--remove-empty-contents', action='store_true',
                    help='Removes contents which are empty or contains whitespaces only')
parser.add_argument('-p', '--remove-properties', nargs='+',
                    help='List of properties: {}'.format(','.join(properties)))
parser.add_argument('fileout', nargs='?',
                    help="Output path, default: print to terminal")
parser.add_argument('-v', '--verbose',
                    action='store_true', help='Verbose, default: %(default)s')

args = parser.parse_args()

with open(args.file,"r",encoding="utf-8") as f:
    doc = html.parse(f)

# change level of typesetting
if args.typesetting:
    # set maximum level of typesetting
    if args.typesetting in ["word"]:
        args.typesetting = "ocrx_" + args.typesetting
    else:
        args.typesetting = "ocr_" + args.typesetting

    # update meta content
    for node in doc.xpath("//*[@name='ocr-capabilities']"):
        content = node.get("content")
        if content is None: continue
        if args.typesetting in content:
            node.set("content", content.split(args.typesetting)[0] + args.typesetting)
            if args.verbose:
                print(node.get("content"))

    # apply new level of typesetting
    for node in doc.xpath("//*[@class='{}']".format(args.typesetting)):
        if args.verbose:
            print(re.sub(r'\s+', '\x20', node.text_content()).strip())
        text_content = node.text_content()
        if args.remove_empty and text_content.strip() == "":
            node.getparent().remove(node)
            continue
        node.text = "\n".join([text.strip() for text in text_content.splitlines() if text.strip() != ""])
        for child in list(node):
            node.remove(child)

# remove properties
if args.remove_properties:
    for node in doc.xpath("//*[@title]"):
        title = node.get("title")
        node.set('title', ';'.join([prop.replace("\"","'") for prop in title.split(";") if prop.strip().split(None, 1)[0] not in args.remove_properties]))
        if args.verbose:
            print("Replaced :{}".format(title))
else:
    # Replace double quotation marks with single
    for node in doc.xpath("//*[@title]"):
        node.set("title",node.get("title").replace("\"","'"))

# remove attributes
if args.remove_attributes:
    for attr in args.remove_attributes:
        for node in doc.xpath(f"//*[@{attr}]"):
            node.attrib.pop(f"{attr}")

# if no output path is given, print to terminal
if args.fileout is None:
    print(etree.tostring(doc, pretty_print=True,encoding=str))
else:
    # create output path if needed
    if not os.path.isdir(os.path.dirname(args.fileout)):
        os.makedirs(os.path.dirname(args.fileout))

    # write new hocr file
    with open(args.fileout, "w", encoding="utf-8") as f:
        f.writelines(etree.tostring(doc, pretty_print=True,encoding=str))
